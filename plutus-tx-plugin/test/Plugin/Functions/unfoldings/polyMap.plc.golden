(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec)
      (datatypebind
        (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl
            mapDirect
            (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                f
                (fun a b)
                (lam
                  l
                  [List a]
                  [
                    [
                      [
                        { [ { Nil_match a } l ] (fun Unit [List b]) }
                        (lam thunk Unit { Nil b })
                      ]
                      (lam
                        x
                        a
                        (lam
                          xs
                          [List a]
                          (lam
                            thunk
                            Unit
                            [
                              [ { Cons b } [ f x ] ]
                              [ [ { { mapDirect a } b } f ] xs ]
                            ]
                          )
                        )
                      )
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        [
          [
            { { mapDirect (con integer) } (con integer) }
            [ (builtin addInteger) (con integer 1) ]
          ]
          [
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl
                  c
                  (fun (con integer) (fun [List (con integer)] [List (con integer)]))
                )
                { Cons (con integer) }
              )
              (lam
                n
                [List (con integer)]
                [ [ c (con integer 0) ] [ [ c (con integer 1) ] n ] ]
              )
            )
            { Nil (con integer) }
          ]
        ]
      )
    )
  )
)