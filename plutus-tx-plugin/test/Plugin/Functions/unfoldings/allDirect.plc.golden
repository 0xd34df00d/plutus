(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Bool (type))

          Bool_match
          (vardecl True Bool) (vardecl False Bool)
        )
      )
      (datatypebind
        (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
      )
      (termbind
        (strict)
        (vardecl nandDirect (fun Bool (fun Bool Bool)))
        (lam
          ds
          Bool
          (lam
            ds
            Bool
            [
              [
                [ { [ Bool_match ds ] (fun Unit Bool) } (lam thunk Unit False) ]
                (lam
                  thunk
                  Unit
                  [
                    [
                      [
                        { [ Bool_match ds ] (fun Unit Bool) }
                        (lam thunk Unit False)
                      ]
                      (lam thunk Unit True)
                    ]
                    Unit
                  ]
                )
              ]
              Unit
            ]
          )
        )
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl
            allDirect (all a (type) (fun (fun a Bool) (fun [List a] Bool)))
          )
          (abs
            a
            (type)
            (lam
              p
              (fun a Bool)
              (lam
                l
                [List a]
                [
                  [
                    [
                      { [ { Nil_match a } l ] (fun Unit Bool) }
                      (lam thunk Unit True)
                    ]
                    (lam
                      h
                      a
                      (lam
                        t
                        [List a]
                        (lam
                          thunk
                          Unit
                          [
                            (let
                              (nonrec)
                              (termbind (strict) (vardecl ds Bool) [ p h ])
                              (lam
                                ds
                                Bool
                                [
                                  [ nandDirect [ [ nandDirect ds ] ds ] ]
                                  [ [ nandDirect ds ] ds ]
                                ]
                              )
                            )
                            [ [ { allDirect a } p ] t ]
                          ]
                        )
                      )
                    )
                  ]
                  Unit
                ]
              )
            )
          )
        )
        [
          [
            { allDirect (con integer) }
            (lam
              ds
              (con integer)
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl b (con bool))
                  [ [ (builtin greaterThanInteger) ds ] (con integer 5) ]
                )
                [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
              )
            )
          ]
          [
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl
                  c
                  (fun (con integer) (fun [List (con integer)] [List (con integer)]))
                )
                { Cons (con integer) }
              )
              (lam
                n
                [List (con integer)]
                [ [ c (con integer 7) ] [ [ c (con integer 6) ] n ] ]
              )
            )
            { Nil (con integer) }
          ]
        ]
      )
    )
  )
)