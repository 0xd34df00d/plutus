(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl wild Bool)
      [
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl arg (con integer))
            [ [ (builtin divideInteger) (con integer 1) ] (con integer 0) ]
          )
          (lam
            arg
            (con integer)
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl b (con bool))
                [ [ (builtin equalsInteger) arg ] arg ]
              )
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
          )
        )
        (con integer 0)
      ]
    )
    (con integer 1)
  )
)