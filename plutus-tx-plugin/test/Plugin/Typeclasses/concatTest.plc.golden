(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Monoid (fun (type) (type)))
        (tyvardecl a (type))
        Monoid_match
        (vardecl
          CConsMonoid
          (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        p1Monoid
        (all a (type) (fun [Monoid a] [(lam a (type) (fun a (fun a a))) a]))
      )
      (abs
        a
        (type)
        (lam
          v
          [Monoid a]
          (let
            (nonrec)
            (termbind (nonstrict) (vardecl v [Monoid a]) v)
            [
              { [ { Monoid_match a } v ] [(lam a (type) (fun a (fun a a))) a] }
              (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
            ]
          )
        )
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl mempty (all a (type) (fun [Monoid a] a)))
          (abs
            a
            (type)
            (lam
              v
              [Monoid a]
              (let
                (nonrec)
                (termbind (nonstrict) (vardecl v [Monoid a]) v)
                [
                  { [ { Monoid_match a } v ] a }
                  (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                ]
              )
            )
          )
        )
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              fFoldableNil_cfoldMap
              (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
            )
            (abs
              m
              (type)
              (abs
                a
                (type)
                (lam
                  dMonoid
                  [Monoid m]
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl dSemigroup [(lam a (type) (fun a (fun a a))) m])
                      [ { p1Monoid m } dMonoid ]
                    )
                    (lam
                      ds
                      (fun a m)
                      (lam
                        ds
                        [List a]
                        (let
                          (nonrec)
                          (termbind (nonstrict) (vardecl wild [List a]) ds)
                          [
                            [
                              [
                                { [ { Nil_match a } ds ] (fun Unit m) }
                                (lam thunk Unit [ { mempty m } dMonoid ])
                              ]
                              (lam
                                x
                                a
                                (lam
                                  xs
                                  [List a]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [ dSemigroup [ ds x ] ]
                                      [
                                        [
                                          [
                                            { { fFoldableNil_cfoldMap m } a }
                                            dMonoid
                                          ]
                                          ds
                                        ]
                                        xs
                                      ]
                                    ]
                                  )
                                )
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (nonstrict)
              (vardecl
                fFoldableNil
                [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) List]
              )
              fFoldableNil_cfoldMap
            )
            (termbind
              (strict)
              (vardecl
                addInteger (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin addInteger)
            )
            (termbind
              (strict)
              (vardecl
                appendString (fun (con string) (fun (con string) (con string)))
              )
              (builtin append)
            )
            (termbind
              (strict)
              (vardecl charToString (fun (con char) (con string)))
              (builtin charToString)
            )
            (typebind (tyvardecl Char (type)) (con char))
            (termbind
              (strict)
              (vardecl
                bad_name
                (all b (type) (all c (type) (all a (type) (fun (fun b c) (fun (fun a b) (fun a c))))))
              )
              (abs
                b
                (type)
                (abs
                  c
                  (type)
                  (abs
                    a
                    (type)
                    (lam f (fun b c) (lam g (fun a b) (lam x a [ f [ g x ] ])))
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fSemigroupEndo_c
                (all a (type) (fun [(lam a (type) (fun a a)) a] (fun [(lam a (type) (fun a a)) a] [(lam a (type) (fun a a)) a])))
              )
              (abs
                a
                (type)
                (lam
                  ds
                  [(lam a (type) (fun a a)) a]
                  (lam
                    ds
                    [(lam a (type) (fun a a)) a]
                    [ [ { { { bad_name a } a } a } ds ] ds ]
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl id (all a (type) (fun a a)))
              (abs a (type) (lam x a x))
            )
            (termbind
              (strict)
              (vardecl
                fMonoidEndo (all a (type) [Monoid [(lam a (type) (fun a a)) a]])
              )
              (abs
                a
                (type)
                [
                  [
                    { CConsMonoid [(lam a (type) (fun a a)) a] }
                    { fSemigroupEndo_c a }
                  ]
                  { id a }
                ]
              )
            )
            (termbind
              (strict)
              (vardecl
                build
                (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
              )
              (abs
                a
                (type)
                (lam
                  g
                  (all b (type) (fun (fun a (fun b b)) (fun b b)))
                  [ [ { g [List a] } { Cons a } ] { Nil a } ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                concat
                (all t (fun (type) (type)) (all a (type) (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (fun [t [List a]] [List a]))))
              )
              (abs
                t
                (fun (type) (type))
                (abs
                  a
                  (type)
                  (lam
                    dFoldable
                    [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t]
                    (lam
                      xs
                      [t [List a]]
                      [
                        { build a }
                        (abs
                          b
                          (type)
                          (lam
                            c
                            (fun a (fun b b))
                            (lam
                              n
                              b
                              [
                                [
                                  [
                                    [
                                      {
                                        {
                                          dFoldable [(lam a (type) (fun a a)) b]
                                        }
                                        [List a]
                                      }
                                      { fMonoidEndo b }
                                    ]
                                    (lam
                                      x
                                      [List a]
                                      (lam
                                        y
                                        b
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  {
                                                    fFoldableNil_cfoldMap
                                                    [(lam a (type) (fun a a)) b]
                                                  }
                                                  a
                                                }
                                                { fMonoidEndo b }
                                              ]
                                              c
                                            ]
                                            x
                                          ]
                                          y
                                        ]
                                      )
                                    )
                                  ]
                                  xs
                                ]
                                n
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                )
              )
            )
            (typebind
              (tyvardecl Endo (fun (type) (type))) (lam a (type) (fun a a))
            )
            (typebind
              (tyvardecl Foldable (fun (fun (type) (type)) (type)))
              (lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m))))))
            )
            (termbind
              (strict)
              (vardecl
                concatenate
                (fun (con bytestring) (fun (con bytestring) (con bytestring)))
              )
              (builtin concatenate)
            )
            (termbind
              (strict)
              (vardecl decodeUtf (fun (con bytestring) (con string)))
              (builtin decodeUtf8)
            )
            (termbind
              (strict)
              (vardecl
                divideInteger
                (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin divideInteger)
            )
            (termbind
              (strict)
              (vardecl
                dropByteString
                (fun (con integer) (fun (con bytestring) (con bytestring)))
              )
              (builtin dropByteString)
            )
            (termbind
              (strict)
              (vardecl emptyByteString (con bytestring))
              (con bytestring #)
            )
            (termbind
              (strict) (vardecl emptyString (con string)) (con string "")
            )
            (termbind
              (strict)
              (vardecl encodeUtf (fun (con string) (con bytestring)))
              (builtin encodeUtf8)
            )
            (datatypebind
              (datatype
                (tyvardecl Bool (type))

                Bool_match
                (vardecl True Bool) (vardecl False Bool)
              )
            )
            (termbind
              (strict)
              (vardecl
                equalsByteString
                (fun (con bytestring) (fun (con bytestring) Bool))
              )
              (lam
                arg
                (con bytestring)
                (lam
                  arg
                  (con bytestring)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin equalsByteString) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                equalsInteger (fun (con integer) (fun (con integer) Bool))
              )
              (lam
                arg
                (con integer)
                (lam
                  arg
                  (con integer)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin equalsInteger) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl equalsString (fun (con string) (fun (con string) Bool)))
              (lam
                arg
                (con string)
                (lam
                  arg
                  (con string)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin equalsString) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl error (all a (type) (fun Unit a)))
              (abs e (type) (lam thunk Unit (error e)))
            )
            (termbind
              (strict)
              (vardecl
                greaterThanByteString
                (fun (con bytestring) (fun (con bytestring) Bool))
              )
              (lam
                arg
                (con bytestring)
                (lam
                  arg
                  (con bytestring)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin greaterThanByteString) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                greaterThanEqInteger
                (fun (con integer) (fun (con integer) Bool))
              )
              (lam
                arg
                (con integer)
                (lam
                  arg
                  (con integer)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                greaterThanInteger (fun (con integer) (fun (con integer) Bool))
              )
              (lam
                arg
                (con integer)
                (lam
                  arg
                  (con integer)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin greaterThanInteger) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                lessThanByteString
                (fun (con bytestring) (fun (con bytestring) Bool))
              )
              (lam
                arg
                (con bytestring)
                (lam
                  arg
                  (con bytestring)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin lessThanByteString) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                lessThanEqInteger (fun (con integer) (fun (con integer) Bool))
              )
              (lam
                arg
                (con integer)
                (lam
                  arg
                  (con integer)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin lessThanEqualsInteger) arg ] arg ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                lessThanInteger (fun (con integer) (fun (con integer) Bool))
              )
              (lam
                arg
                (con integer)
                (lam
                  arg
                  (con integer)
                  [
                    (lam
                      b
                      (con bool)
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                    [ [ (builtin lessThanInteger) arg ] arg ]
                  ]
                )
              )
            )
            (typebind
              (tyvardecl Semigroup (fun (type) (type)))
              (lam a (type) (fun a (fun a a)))
            )
            (termbind
              (strict)
              (vardecl
                modInteger (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin modInteger)
            )
            (termbind
              (strict)
              (vardecl
                multiplyInteger
                (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin multiplyInteger)
            )
            (termbind
              (strict)
              (vardecl
                quotientInteger
                (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin quotientInteger)
            )
            (termbind
              (strict)
              (vardecl
                remainderInteger
                (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin remainderInteger)
            )
            (termbind
              (strict)
              (vardecl sha2_ (fun (con bytestring) (con bytestring)))
              (builtin sha2_256)
            )
            (termbind
              (strict)
              (vardecl sha3_ (fun (con bytestring) (con bytestring)))
              (builtin sha3_256)
            )
            (termbind
              (strict)
              (vardecl
                subtractInteger
                (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin subtractInteger)
            )
            (termbind
              (strict)
              (vardecl
                takeByteString
                (fun (con integer) (fun (con bytestring) (con bytestring)))
              )
              (builtin takeByteString)
            )
            (typebind (tyvardecl Integer (type)) (con integer))
            (termbind
              (strict)
              (vardecl trace (fun (con string) Unit))
              (lam
                arg
                (con string)
                [ (lam b (con unit) Unit) [ (builtin trace) arg ] ]
              )
            )
            (typebind (tyvardecl String (type)) (con string))
            (termbind
              (strict)
              (vardecl
                verifySignature
                (fun (con bytestring) (fun (con bytestring) (fun (con bytestring) Bool)))
              )
              (lam
                arg
                (con bytestring)
                (lam
                  arg
                  (con bytestring)
                  (lam
                    arg
                    (con bytestring)
                    [
                      (lam
                        b
                        (con bool)
                        [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                      )
                      [ [ [ (builtin verifySignature) arg ] arg ] arg ]
                    ]
                  )
                )
              )
            )
            (typebind (tyvardecl ByteString (type)) (con bytestring))
            [
              [ { { concat List } (con integer) } fFoldableNil ]
              [
                { build [List (con integer)] }
                (abs
                  a
                  (type)
                  (lam
                    c
                    (fun [List (con integer)] (fun a a))
                    (lam
                      n
                      a
                      [
                        [
                          c
                          [
                            { build (con integer) }
                            (abs
                              a
                              (type)
                              (lam
                                c
                                (fun (con integer) (fun a a))
                                (lam
                                  n
                                  a
                                  [
                                    [ c (con integer 1) ]
                                    [ [ c (con integer 2) ] n ]
                                  ]
                                )
                              )
                            )
                          ]
                        ]
                        [
                          [
                            c
                            [
                              { build (con integer) }
                              (abs
                                a
                                (type)
                                (lam
                                  c
                                  (fun (con integer) (fun a a))
                                  (lam
                                    n
                                    a
                                    [
                                      [ c (con integer 3) ]
                                      [ [ c (con integer 4) ] n ]
                                    ]
                                  )
                                )
                              )
                            ]
                          ]
                          n
                        ]
                      ]
                    )
                  )
                )
              ]
            ]
          )
        )
      )
    )
  )
)