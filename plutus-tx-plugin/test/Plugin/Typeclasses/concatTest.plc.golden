(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          build
          (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
        )
        (abs
          a
          (type)
          (lam
            g
            (all b (type) (fun (fun a (fun b b)) (fun b b)))
            [ [ { g [List a] } { Cons a } ] { Nil a } ]
          )
        )
      )
      (datatypebind
        (datatype
          (tyvardecl Monoid (fun (type) (type)))
          (tyvardecl a (type))
          Monoid_match
          (vardecl
            CConsMonoid
            (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
          )
        )
      )
      (datatypebind
        (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl
            fFoldableNil_cfoldMap
            (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
          )
          (abs
            m
            (type)
            (abs
              a
              (type)
              (lam
                dMonoid
                [Monoid m]
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl dSemigroup [(lam a (type) (fun a (fun a a))) m])
                    [
                      {
                        [ { Monoid_match m } dMonoid ]
                        [(lam a (type) (fun a (fun a a))) m]
                      }
                      (lam v [(lam a (type) (fun a (fun a a))) m] (lam v m v))
                    ]
                  )
                  (lam
                    ds
                    (fun a m)
                    (lam
                      ds
                      [List a]
                      [
                        [
                          [
                            { [ { Nil_match a } ds ] (fun Unit m) }
                            (lam
                              thunk
                              Unit
                              [
                                { [ { Monoid_match m } dMonoid ] m }
                                (lam
                                  v
                                  [(lam a (type) (fun a (fun a a))) m]
                                  (lam v m v)
                                )
                              ]
                            )
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [List a]
                              (lam
                                thunk
                                Unit
                                [
                                  [ dSemigroup [ ds x ] ]
                                  [
                                    [
                                      [
                                        { { fFoldableNil_cfoldMap m } a }
                                        dMonoid
                                      ]
                                      ds
                                    ]
                                    xs
                                  ]
                                ]
                              )
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
        )
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              fMonoidEndo (all a (type) [Monoid [(lam a (type) (fun a a)) a]])
            )
            (abs
              a
              (type)
              [
                [
                  { CConsMonoid [(lam a (type) (fun a a)) a] }
                  (lam
                    ds
                    [(lam a (type) (fun a a)) a]
                    (lam
                      ds [(lam a (type) (fun a a)) a] (lam x a [ ds [ ds x ] ])
                    )
                  )
                ]
                (lam x a x)
              ]
            )
          )
          (termbind
            (strict)
            (vardecl xs [List [List (con integer)]])
            [
              { build [List (con integer)] }
              (abs
                a
                (type)
                (lam
                  c
                  (fun [List (con integer)] (fun a a))
                  (lam
                    n
                    a
                    [
                      [
                        c
                        [
                          { build (con integer) }
                          (abs
                            a
                            (type)
                            (lam
                              c
                              (fun (con integer) (fun a a))
                              (lam
                                n
                                a
                                [
                                  [ c (con integer 1) ]
                                  [ [ c (con integer 2) ] n ]
                                ]
                              )
                            )
                          )
                        ]
                      ]
                      [
                        [
                          c
                          [
                            { build (con integer) }
                            (abs
                              a
                              (type)
                              (lam
                                c
                                (fun (con integer) (fun a a))
                                (lam
                                  n
                                  a
                                  [
                                    [ c (con integer 3) ]
                                    [ [ c (con integer 4) ] n ]
                                  ]
                                )
                              )
                            )
                          ]
                        ]
                        n
                      ]
                    ]
                  )
                )
              )
            ]
          )
          [
            { build (con integer) }
            (abs
              b
              (type)
              (lam
                c
                (fun (con integer) (fun b b))
                (lam
                  n
                  b
                  [
                    [
                      [
                        [
                          {
                            {
                              fFoldableNil_cfoldMap [(lam a (type) (fun a a)) b]
                            }
                            [List (con integer)]
                          }
                          { fMonoidEndo b }
                        ]
                        (lam
                          x
                          [List (con integer)]
                          (lam
                            y
                            b
                            [
                              [
                                [
                                  [
                                    {
                                      {
                                        fFoldableNil_cfoldMap
                                        [(lam a (type) (fun a a)) b]
                                      }
                                      (con integer)
                                    }
                                    { fMonoidEndo b }
                                  ]
                                  c
                                ]
                                x
                              ]
                              y
                            ]
                          )
                        )
                      ]
                      xs
                    ]
                    n
                  ]
                )
              )
            )
          ]
        )
      )
    )
  )
)