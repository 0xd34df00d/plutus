(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl bad_name (fun Bool (fun Bool Bool)))
      (lam
        l
        Bool
        (lam
          r
          Bool
          (let
            (nonrec)
            (termbind (nonstrict) (vardecl wild Bool) l)
            [
              [
                [ { [ Bool_match l ] (fun Unit Bool) } (lam thunk Unit r) ]
                (lam thunk Unit False)
              ]
              Unit
            ]
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Animal (type))

        Animal_match
        (vardecl Cat Animal) (vardecl Dog Animal)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl PersonLike (fun (type) (type)))
        (tyvardecl a (type))
        PersonLike_match
        (vardecl
          CConsPersonLike
          (fun (fun a (con integer)) (fun (fun a (fun Animal Bool)) [PersonLike a]))
        )
      )
    )
    (termbind
      (strict)
      (vardecl age (all a (type) (fun [PersonLike a] (fun a (con integer)))))
      (abs
        a
        (type)
        (lam
          v
          [PersonLike a]
          (let
            (nonrec)
            (termbind (nonstrict) (vardecl v [PersonLike a]) v)
            [
              { [ { PersonLike_match a } v ] (fun a (con integer)) }
              (lam v (fun a (con integer)) (lam v (fun a (fun Animal Bool)) v))
            ]
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl greaterThanInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin greaterThanInteger) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        likesAnimal
        (all a (type) (fun [PersonLike a] (fun a (fun Animal Bool))))
      )
      (abs
        a
        (type)
        (lam
          v
          [PersonLike a]
          (let
            (nonrec)
            (termbind (nonstrict) (vardecl v [PersonLike a]) v)
            [
              { [ { PersonLike_match a } v ] (fun a (fun Animal Bool)) }
              (lam v (fun a (con integer)) (lam v (fun a (fun Animal Bool)) v))
            ]
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl predicate (all p (type) (fun [PersonLike p] (fun p Bool))))
      (abs
        p
        (type)
        (lam
          dPersonLike
          [PersonLike p]
          (lam
            p
            p
            [
              [ bad_name [ [ [ { likesAnimal p } dPersonLike ] p ] Cat ] ]
              [
                [ greaterThanInteger [ [ { age p } dPersonLike ] p ] ]
                (con integer 30)
              ]
            ]
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Person (type))

        Person_match
        (vardecl Jane Person) (vardecl Jim Person)
      )
    )
    (termbind
      (strict)
      (vardecl cage (fun Person (con integer)))
      (lam
        ds
        Person
        (let
          (nonrec)
          (termbind (nonstrict) (vardecl wild Person) ds)
          [
            [ { [ Person_match ds ] (con integer) } (con integer 35) ]
            (con integer 30)
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl clikesAnimal (fun Person (fun Animal Bool)))
      (lam
        ds
        Person
        (lam
          ds
          Animal
          (let
            (nonrec)
            (termbind (nonstrict) (vardecl wild Person) ds)
            [
              [
                [
                  { [ Person_match ds ] (fun Unit Bool) }
                  (lam
                    thunk
                    Unit
                    (let
                      (nonrec)
                      (termbind (nonstrict) (vardecl wild Animal) ds)
                      [
                        [
                          [
                            { [ Animal_match ds ] (fun Unit Bool) }
                            (lam thunk Unit True)
                          ]
                          (lam thunk Unit False)
                        ]
                        Unit
                      ]
                    )
                  )
                ]
                (lam thunk Unit False)
              ]
              Unit
            ]
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl fPersonLikePerson [PersonLike Person])
      [ [ { CConsPersonLike Person } cage ] clikesAnimal ]
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl appendString (fun (con string) (fun (con string) (con string))))
      (builtin append)
    )
    (termbind
      (strict)
      (vardecl charToString (fun (con char) (con string)))
      (builtin charToString)
    )
    (typebind (tyvardecl Char (type)) (con char))
    (termbind
      (strict)
      (vardecl
        concatenate
        (fun (con bytestring) (fun (con bytestring) (con bytestring)))
      )
      (builtin concatenate)
    )
    (termbind
      (strict)
      (vardecl decodeUtf (fun (con bytestring) (con string)))
      (builtin decodeUtf8)
    )
    (termbind
      (strict)
      (vardecl
        divideInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin divideInteger)
    )
    (termbind
      (strict)
      (vardecl
        dropByteString
        (fun (con integer) (fun (con bytestring) (con bytestring)))
      )
      (builtin dropByteString)
    )
    (termbind
      (strict) (vardecl emptyByteString (con bytestring)) (con bytestring #)
    )
    (termbind (strict) (vardecl emptyString (con string)) (con string ""))
    (termbind
      (strict)
      (vardecl encodeUtf (fun (con string) (con bytestring)))
      (builtin encodeUtf8)
    )
    (termbind
      (strict)
      (vardecl
        equalsByteString (fun (con bytestring) (fun (con bytestring) Bool))
      )
      (lam
        arg
        (con bytestring)
        (lam
          arg
          (con bytestring)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin equalsByteString) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin equalsInteger) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl equalsString (fun (con string) (fun (con string) Bool)))
      (lam
        arg
        (con string)
        (lam
          arg
          (con string)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin equalsString) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun Unit a)))
      (abs e (type) (lam thunk Unit (error e)))
    )
    (termbind
      (strict)
      (vardecl
        greaterThanByteString (fun (con bytestring) (fun (con bytestring) Bool))
      )
      (lam
        arg
        (con bytestring)
        (lam
          arg
          (con bytestring)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin greaterThanByteString) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl greaterThanEqInteger (fun (con integer) (fun (con integer) Bool))
      )
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        lessThanByteString (fun (con bytestring) (fun (con bytestring) Bool))
      )
      (lam
        arg
        (con bytestring)
        (lam
          arg
          (con bytestring)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin lessThanByteString) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin lessThanEqualsInteger) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl lessThanInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin lessThanInteger) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl modInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin modInteger)
    )
    (termbind
      (strict)
      (vardecl
        multiplyInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin multiplyInteger)
    )
    (termbind
      (strict)
      (vardecl
        quotientInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin quotientInteger)
    )
    (termbind
      (strict)
      (vardecl
        remainderInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin remainderInteger)
    )
    (termbind
      (strict)
      (vardecl sha2_ (fun (con bytestring) (con bytestring)))
      (builtin sha2_256)
    )
    (termbind
      (strict)
      (vardecl sha3_ (fun (con bytestring) (con bytestring)))
      (builtin sha3_256)
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (termbind
      (strict)
      (vardecl
        takeByteString
        (fun (con integer) (fun (con bytestring) (con bytestring)))
      )
      (builtin takeByteString)
    )
    (typebind (tyvardecl Integer (type)) (con integer))
    (termbind
      (strict)
      (vardecl trace (fun (con string) Unit))
      (lam arg (con string) [ (lam b (con unit) Unit) [ (builtin trace) arg ] ])
    )
    (typebind (tyvardecl String (type)) (con string))
    (termbind
      (strict)
      (vardecl
        verifySignature
        (fun (con bytestring) (fun (con bytestring) (fun (con bytestring) Bool)))
      )
      (lam
        arg
        (con bytestring)
        (lam
          arg
          (con bytestring)
          (lam
            arg
            (con bytestring)
            [
              (lam
                b
                (con bool)
                [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
              )
              [ [ [ (builtin verifySignature) arg ] arg ] arg ]
            ]
          )
        )
      )
    )
    (typebind (tyvardecl ByteString (type)) (con bytestring))
    (lam ds Person [ [ { predicate Person } fPersonLikePerson ] ds ])
  )
)