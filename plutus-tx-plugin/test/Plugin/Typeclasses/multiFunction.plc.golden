(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Person (type))

        Person_match
        (vardecl Jane Person) (vardecl Jim Person)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Animal (type))

        Animal_match
        (vardecl Cat Animal) (vardecl Dog Animal)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl PersonLike (fun (type) (type)))
        (tyvardecl a (type))
        PersonLike_match
        (vardecl
          CConsPersonLike
          (fun (fun a (con integer)) (fun (fun a (fun Animal Bool)) [PersonLike a]))
        )
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (nonstrict)
      (vardecl fPersonLikePerson [PersonLike Person])
      [
        [
          { CConsPersonLike Person }
          (lam
            ds
            Person
            [
              [ { [ Person_match ds ] (con integer) } (con integer 35) ]
              (con integer 30)
            ]
          )
        ]
        (lam
          ds
          Person
          (lam
            ds
            Animal
            [
              [
                [
                  { [ Person_match ds ] (fun Unit Bool) }
                  (lam
                    thunk
                    Unit
                    [
                      [
                        [
                          { [ Animal_match ds ] (fun Unit Bool) }
                          (lam thunk Unit True)
                        ]
                        (lam thunk Unit False)
                      ]
                      Unit
                    ]
                  )
                ]
                (lam thunk Unit False)
              ]
              Unit
            ]
          )
        )
      ]
    )
    (lam
      ds
      Person
      [
        (let
          (nonrec)
          (termbind
            (strict) (vardecl dPersonLike [PersonLike Person]) fPersonLikePerson
          )
          (lam
            p
            Person
            [
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl l Bool)
                  [
                    [
                      [
                        {
                          [ { PersonLike_match Person } dPersonLike ]
                          (fun Person (fun Animal Bool))
                        }
                        (lam
                          v
                          (fun Person (con integer))
                          (lam v (fun Person (fun Animal Bool)) v)
                        )
                      ]
                      p
                    ]
                    Cat
                  ]
                )
                (lam
                  r
                  Bool
                  [
                    [
                      [
                        { [ Bool_match l ] (fun Unit Bool) } (lam thunk Unit r)
                      ]
                      (lam thunk Unit False)
                    ]
                    Unit
                  ]
                )
              )
              [
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl arg (con integer))
                    [
                      [
                        {
                          [ { PersonLike_match Person } dPersonLike ]
                          (fun Person (con integer))
                        }
                        (lam
                          v
                          (fun Person (con integer))
                          (lam v (fun Person (fun Animal Bool)) v)
                        )
                      ]
                      p
                    ]
                  )
                  (lam
                    arg
                    (con integer)
                    (let
                      (nonrec)
                      (termbind
                        (strict)
                        (vardecl b (con bool))
                        [ [ (builtin greaterThanInteger) arg ] arg ]
                      )
                      [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                    )
                  )
                )
                (con integer 30)
              ]
            ]
          )
        )
        ds
      ]
    )
  )
)