(program
  (let
    (nonrec)
    (termbind
      (nonstrict)
      (vardecl
        fSizedInteger [(lam a (type) (fun a (con integer))) (con integer)]
      )
      (lam x (con integer) x)
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        dSized
        [(lam a (type) (fun a (con integer))) [[Tuple2 (con integer)] (con integer)]]
      )
      [
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl dSized [(lam a (type) (fun a (con integer))) (con integer)]
            )
            fSizedInteger
          )
          (lam
            dSized
            [(lam a (type) (fun a (con integer))) (con integer)]
            (lam
              ds
              [[Tuple2 (con integer)] (con integer)]
              [
                {
                  [ { { Tuple2_match (con integer) } (con integer) } ds ]
                  (con integer)
                }
                (lam
                  a
                  (con integer)
                  (lam
                    b
                    (con integer)
                    [ [ (builtin addInteger) [ dSized a ] ] [ dSized b ] ]
                  )
                )
              ]
            )
          )
        )
        fSizedInteger
      ]
    )
    (lam
      ds
      (con integer)
      (lam
        ds
        (con integer)
        [
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                v
                [(lam a (type) (fun a (con integer))) [[Tuple2 (con integer)] (con integer)]]
              )
              dSized
            )
            v
          )
          [ [ { { Tuple2 (con integer) } (con integer) } ds ] ds ]
        ]
      )
    )
  )
)