(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl b (con bool))
              [ [ (builtin equalsInteger) arg ] arg ]
            )
            [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl lessThanEqInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl b (con bool))
              [ [ (builtin lessThanEqualsInteger) arg ] arg ]
            )
            [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Ordering (type))

        Ordering_match
        (vardecl EQ Ordering) (vardecl GT Ordering) (vardecl LT Ordering)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Ord (fun (type) (type)))
        (tyvardecl a (type))
        Ord_match
        (vardecl
          CConsOrd
          (fun [(lam a (type) (fun a (fun a Bool))) a] (fun (fun a (fun a Ordering)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a a)) (fun (fun a (fun a a)) [Ord a]))))))))
        )
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (nonstrict)
      (vardecl fOrdInteger [Ord (con integer)])
      [
        [
          [
            [
              [
                [
                  [
                    [ { CConsOrd (con integer) } equalsInteger ]
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [ Bool_match [ [ equalsInteger x ] y ] ]
                                (fun Unit Ordering)
                              }
                              (lam thunk Unit EQ)
                            ]
                            (lam
                              thunk
                              Unit
                              [
                                [
                                  [
                                    {
                                      [
                                        Bool_match [ [ lessThanEqInteger x ] y ]
                                      ]
                                      (fun Unit Ordering)
                                    }
                                    (lam thunk Unit LT)
                                  ]
                                  (lam thunk Unit GT)
                                ]
                                Unit
                              ]
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  ]
                  (lam
                    arg
                    (con integer)
                    (lam
                      arg
                      (con integer)
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl b (con bool))
                          [ [ (builtin lessThanInteger) arg ] arg ]
                        )
                        [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                      )
                    )
                  )
                ]
                lessThanEqInteger
              ]
              (lam
                arg
                (con integer)
                (lam
                  arg
                  (con integer)
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl b (con bool))
                      [ [ (builtin greaterThanInteger) arg ] arg ]
                    )
                    [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                  )
                )
              )
            ]
            (lam
              arg
              (con integer)
              (lam
                arg
                (con integer)
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl b (con bool))
                    [ [ (builtin greaterThanEqualsInteger) arg ] arg ]
                  )
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
              )
            )
          ]
          (lam
            x
            (con integer)
            (lam
              y
              (con integer)
              [
                [
                  [
                    {
                      [ Bool_match [ [ lessThanEqInteger x ] y ] ]
                      (fun Unit (con integer))
                    }
                    (lam thunk Unit y)
                  ]
                  (lam thunk Unit x)
                ]
                Unit
              ]
            )
          )
        ]
        (lam
          x
          (con integer)
          (lam
            y
            (con integer)
            [
              [
                [
                  {
                    [ Bool_match [ [ lessThanEqInteger x ] y ] ]
                    (fun Unit (con integer))
                  }
                  (lam thunk Unit x)
                ]
                (lam thunk Unit y)
              ]
              Unit
            ]
          )
        )
      ]
    )
    [
      [
        (let
          (nonrec)
          (termbind (strict) (vardecl dOrd [Ord (con integer)]) fOrdInteger)
          (lam
            a
            (con integer)
            (lam
              b
              (con integer)
              [
                [
                  [
                    [
                      {
                        [
                          Ordering_match
                          [
                            [
                              [
                                {
                                  [ { Ord_match (con integer) } dOrd ]
                                  (fun (con integer) (fun (con integer) Ordering))
                                }
                                (lam
                                  v
                                  [(lam a (type) (fun a (fun a Bool))) (con integer)]
                                  (lam
                                    v
                                    (fun (con integer) (fun (con integer) Ordering))
                                    (lam
                                      v
                                      (fun (con integer) (fun (con integer) Bool))
                                      (lam
                                        v
                                        (fun (con integer) (fun (con integer) Bool))
                                        (lam
                                          v
                                          (fun (con integer) (fun (con integer) Bool))
                                          (lam
                                            v
                                            (fun (con integer) (fun (con integer) Bool))
                                            (lam
                                              v
                                              (fun (con integer) (fun (con integer) (con integer)))
                                              (lam
                                                v
                                                (fun (con integer) (fun (con integer) (con integer)))
                                                v
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              ]
                              a
                            ]
                            b
                          ]
                        ]
                        (fun Unit Ordering)
                      }
                      (lam thunk Unit EQ)
                    ]
                    (lam thunk Unit LT)
                  ]
                  (lam thunk Unit GT)
                ]
                Unit
              ]
            )
          )
        )
        (con integer 1)
      ]
      (con integer 2)
    ]
  )
)