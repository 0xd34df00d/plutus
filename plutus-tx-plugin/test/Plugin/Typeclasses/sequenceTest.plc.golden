(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl Monoid (fun (type) (type)))
            (tyvardecl a (type))
            Monoid_match
            (vardecl
              CConsMonoid
              (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
            )
          )
        )
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              fFoldableNil_cfoldMap
              (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
            )
            (abs
              m
              (type)
              (abs
                a
                (type)
                (lam
                  dMonoid
                  [Monoid m]
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl dSemigroup [(lam a (type) (fun a (fun a a))) m])
                      [
                        {
                          [ { Monoid_match m } dMonoid ]
                          [(lam a (type) (fun a (fun a a))) m]
                        }
                        (lam v [(lam a (type) (fun a (fun a a))) m] (lam v m v))
                      ]
                    )
                    (lam
                      ds
                      (fun a m)
                      (lam
                        ds
                        [List a]
                        [
                          [
                            [
                              { [ { Nil_match a } ds ] (fun Unit m) }
                              (lam
                                thunk
                                Unit
                                [
                                  { [ { Monoid_match m } dMonoid ] m }
                                  (lam
                                    v
                                    [(lam a (type) (fun a (fun a a))) m]
                                    (lam v m v)
                                  )
                                ]
                              )
                            ]
                            (lam
                              x
                              a
                              (lam
                                xs
                                [List a]
                                (lam
                                  thunk
                                  Unit
                                  [
                                    [ dSemigroup [ ds x ] ]
                                    [
                                      [
                                        [
                                          { { fFoldableNil_cfoldMap m } a }
                                          dMonoid
                                        ]
                                        ds
                                      ]
                                      xs
                                    ]
                                  ]
                                )
                              )
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                )
              )
            )
          )
          (let
            (rec)
            (termbind
              (nonstrict)
              (vardecl
                fFunctorNil_cfmap
                (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
              )
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    f
                    (fun a b)
                    (lam
                      l
                      [List a]
                      [
                        [
                          [
                            { [ { Nil_match a } l ] (fun Unit [List b]) }
                            (lam thunk Unit { Nil b })
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [List a]
                              (lam
                                thunk
                                Unit
                                [
                                  [ { Cons b } [ f x ] ]
                                  [ [ { { fFunctorNil_cfmap a } b } f ] xs ]
                                ]
                              )
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
            (let
              (nonrec)
              (datatypebind
                (datatype
                  (tyvardecl Applicative (fun (fun (type) (type)) (type)))
                  (tyvardecl f (fun (type) (type)))
                  Applicative_match
                  (vardecl
                    CConsApplicative
                    (fun [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f] (fun (all a (type) (fun a [f a])) (fun (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b])))) [Applicative f])))
                  )
                )
              )
              (let
                (rec)
                (termbind
                  (nonstrict)
                  (vardecl
                    fTraversableNil_ctraverse
                    (all f (fun (type) (type)) (all a (type) (all b (type) (fun [Applicative f] (fun (fun a [f b]) (fun [List a] [f [List b]]))))))
                  )
                  (abs
                    f
                    (fun (type) (type))
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          dApplicative
                          [Applicative f]
                          (lam
                            ds
                            (fun a [f b])
                            (lam
                              ds
                              [List a]
                              [
                                [
                                  [
                                    {
                                      [ { Nil_match a } ds ]
                                      (fun Unit [f [List b]])
                                    }
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        {
                                          [
                                            {
                                              [
                                                { Applicative_match f }
                                                dApplicative
                                              ]
                                              (all a (type) (fun a [f a]))
                                            }
                                            (lam
                                              v
                                              [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                                              (lam
                                                v
                                                (all a (type) (fun a [f a]))
                                                (lam
                                                  v
                                                  (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                                                  v
                                                )
                                              )
                                            )
                                          ]
                                          [List b]
                                        }
                                        { Nil b }
                                      ]
                                    )
                                  ]
                                  (lam
                                    x
                                    a
                                    (lam
                                      xs
                                      [List a]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            {
                                              {
                                                [
                                                  {
                                                    [
                                                      { Applicative_match f }
                                                      dApplicative
                                                    ]
                                                    (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                                                  }
                                                  (lam
                                                    v
                                                    [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                                                    (lam
                                                      v
                                                      (all a (type) (fun a [f a]))
                                                      (lam
                                                        v
                                                        (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                                                        v
                                                      )
                                                    )
                                                  )
                                                ]
                                                [List b]
                                              }
                                              [List b]
                                            }
                                            [
                                              [
                                                {
                                                  {
                                                    [
                                                      {
                                                        [
                                                          {
                                                            Applicative_match f
                                                          }
                                                          dApplicative
                                                        ]
                                                        [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                                                      }
                                                      (lam
                                                        v
                                                        [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                                                        (lam
                                                          v
                                                          (all a (type) (fun a [f a]))
                                                          (lam
                                                            v
                                                            (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                                                            v
                                                          )
                                                        )
                                                      )
                                                    ]
                                                    b
                                                  }
                                                  (fun [List b] [List b])
                                                }
                                                { Cons b }
                                              ]
                                              [ ds x ]
                                            ]
                                          ]
                                          [
                                            [
                                              [
                                                {
                                                  {
                                                    {
                                                      fTraversableNil_ctraverse
                                                      f
                                                    }
                                                    a
                                                  }
                                                  b
                                                }
                                                dApplicative
                                              ]
                                              ds
                                            ]
                                            xs
                                          ]
                                        ]
                                      )
                                    )
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                )
                (let
                  (nonrec)
                  (datatypebind
                    (datatype
                      (tyvardecl Traversable (fun (fun (type) (type)) (type)))
                      (tyvardecl t (fun (type) (type)))
                      Traversable_match
                      (vardecl
                        CConsTraversable
                        (fun [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) t] (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (fun (all f (fun (type) (type)) (all a (type) (all b (type) (fun [Applicative f] (fun (fun a [f b]) (fun [t a] [f [t b]])))))) [Traversable t])))
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fTraversableNil [Traversable List])
                    [
                      [
                        [ { CConsTraversable List } fFunctorNil_cfmap ]
                        fFoldableNil_cfoldMap
                      ]
                      fTraversableNil_ctraverse
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fApplicativeMaybe [Applicative Maybe])
                    [
                      [
                        [
                          { CConsApplicative Maybe }
                          (abs
                            a
                            (type)
                            (abs
                              b
                              (type)
                              (lam
                                f
                                (fun a b)
                                (lam
                                  ds
                                  [Maybe a]
                                  [
                                    [
                                      [
                                        {
                                          [ { Maybe_match a } ds ]
                                          (fun Unit [Maybe b])
                                        }
                                        (lam
                                          a
                                          a
                                          (lam thunk Unit [ { Just b } [ f a ] ]
                                          )
                                        )
                                      ]
                                      (lam thunk Unit { Nothing b })
                                    ]
                                    Unit
                                  ]
                                )
                              )
                            )
                          )
                        ]
                        Just
                      ]
                      (abs
                        a
                        (type)
                        (abs
                          b
                          (type)
                          (lam
                            ds
                            [Maybe (fun a b)]
                            (lam
                              ds
                              [Maybe a]
                              [
                                [
                                  [
                                    {
                                      [ { Maybe_match (fun a b) } ds ]
                                      (fun Unit [Maybe b])
                                    }
                                    (lam
                                      ipv
                                      (fun a b)
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            [
                                              {
                                                [ { Maybe_match a } ds ]
                                                (fun Unit [Maybe b])
                                              }
                                              (lam
                                                ipv
                                                a
                                                (lam
                                                  thunk
                                                  Unit
                                                  [ { Just b } [ ipv ipv ] ]
                                                )
                                              )
                                            ]
                                            (lam thunk Unit { Nothing b })
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam thunk Unit { Nothing b })
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      )
                    ]
                  )
                  [
                    [
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl dTraversable [Traversable List])
                          fTraversableNil
                        )
                        (lam
                          dApplicative
                          [Applicative Maybe]
                          [
                            [
                              {
                                {
                                  {
                                    [
                                      {
                                        [
                                          { Traversable_match List }
                                          dTraversable
                                        ]
                                        (all f (fun (type) (type)) (all a (type) (all b (type) (fun [Applicative f] (fun (fun a [f b]) (fun [List a] [f [List b]]))))))
                                      }
                                      (lam
                                        v
                                        [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) List]
                                        (lam
                                          v
                                          [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) List]
                                          (lam
                                            v
                                            (all f (fun (type) (type)) (all a (type) (all b (type) (fun [Applicative f] (fun (fun a [f b]) (fun [List a] [f [List b]]))))))
                                            v
                                          )
                                        )
                                      )
                                    ]
                                    Maybe
                                  }
                                  [Maybe (con integer)]
                                }
                                (con integer)
                              }
                              dApplicative
                            ]
                            (lam x [Maybe (con integer)] x)
                          ]
                        )
                      )
                      fApplicativeMaybe
                    ]
                    [
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl
                            c
                            (fun [Maybe (con integer)] (fun [List [Maybe (con integer)]] [List [Maybe (con integer)]]))
                          )
                          { Cons [Maybe (con integer)] }
                        )
                        (lam
                          n
                          [List [Maybe (con integer)]]
                          [
                            [ c [ { Just (con integer) } (con integer 1) ] ]
                            [
                              [ c [ { Just (con integer) } (con integer 2) ] ] n
                            ]
                          ]
                        )
                      )
                      { Nil [Maybe (con integer)] }
                    ]
                  ]
                )
              )
            )
          )
        )
      )
    )
  )
)